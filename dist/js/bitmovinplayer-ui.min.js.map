{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/customplaybackbuttons.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/replaybutton.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/groupplaybackapi.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/localization/languages/es.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/spatialnavigation/ListNavigationGroup.ts","src/ts/spatialnavigation/gethtmlelementsfromcomponents.ts","src/ts/spatialnavigation/keymap.ts","src/ts/spatialnavigation/navigationalgorithm.ts","src/ts/spatialnavigation/navigationgroup.ts","src/ts/spatialnavigation/nodeeventsubscriber.ts","src/ts/spatialnavigation/rootnavigationgroup.ts","src/ts/spatialnavigation/seekbarhandler.ts","src/ts/spatialnavigation/spatialnavigation.ts","src/ts/spatialnavigation/typeguards.ts","src/ts/spatialnavigation/types.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","g","exports","module","define","amd","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ArrayUtils","remove","array","item","index","indexOf","splice","i18n_1","AudioTrackSwitchHandler","player","element","uimanager","_this","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","i18n","getLocalizer","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","synchronizeItems","map","key","bindSelectionEvent","bindPlayerEvents","prototype","onItemSelected","subscribe","_","value","setAudio","on","PlayerEvent","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","isHisense","platform","includes","maxTouchPoints","msMaxTouchPoints","_super","clickoverlay_1","AdClickOverlay","ClickOverlay","__extends","configure","adFinishedHandler","setUrl","clickThroughCallback","AdStarted","ad","clickThroughUrl","clickThroughUrlOpened","AdFinished","AdSkipped","AdError","onClick","pause","label_1","stringutils_1","AdMessageLabel","Label","adEndHandler","off","TimeChanged","updateMessageHandler","config","text","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","uiConfig","message","mergeConfig","cssClass","button_1","AdSkipButton","Button","updateSkipMessageHandler","untilSkippableMessage","skippableMessage","skipOffset","show","getCurrentTime","disable","enable","skippableAfter","hide","ads","skip","togglebutton_1","AirPlayToggleButton","ToggleButton","airPlayAvailableHandler","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","selectbox_1","AudioQualitySelectBox","SelectBox","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","selectCurrentAudioQuality","getAudioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","cssClasses","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","container_1","component_1","timeout_1","BufferingOverlay","Container","showOverlay","overlayShowTimeout","start","hideOverlay","clear","Timeout","showDelayMs","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","indicators","Component","tag","role","hidden","components","dom_1","eventdispatcher_1","toDomElement","buttonElementAttributes","aria-label","ariaLabel","class","getCssClasses","type","aria-pressed","tabindex","tabIndex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","buttonEvents","dispatch","getEvent","EventDispatcher","CastStatusOverlay","CastWaitingForDevice","castDeviceName","castPayload","deviceName","statusLabel","CastStarted","CastStopped","CastToggleButton","castAvailableHander","isCastAvailable","isCasting","castStop","castVideo","CastAvailable","uicontainer_1","CastUIContainer","UIContainer","isUiShown","showUi","castUiHideTimeout","hideDelay","onControlsHide","onControlsShow","showUiPermanently","showUiWithTimeout","isPlaying","release","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","disabled","isHidden","isDisabled","onShow","onComponentShow","onHide","onComponentHide","onHoverChangedEvent","hasDomElement","Boolean","setAriaLabel","setAriaAttr","name","attr","concat","defaults","base","assign","css","join","trim","cssClassOrId","cssPrefix","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","componentEvents","onEnabled","onDisabled","onHoverChanged","Guid","next","arrayutils_1","addComponent","component","push","componentsToAdd","removeComponent","componentsToRemove","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","settingspanel_1","ControlBar","hoverStackCount","isSettingsPanelShown","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","args","SettingsPanel","onPreviewControlsHide","cancel","playbacktogglebutton_1","CustomPlaybackButtons","playbackToggleButton","seek","dom","rewindButton","forwardButton","PlaybackToggleButton","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","ErrorMessageOverlay","errorEventHandler","handleErrorMessage","customizedMessage","errorMessages","customMessage","messages","display","isMobileV3PlayerAPI","MobileV3PlayerEvent","PlayerError","ErrorUtils","defaultMobileV3ErrorMessageTranslator","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","tvNoiseBackground","stop","errorMessage","errorLabel","TvNoiseCanvas","FullscreenToggleButton","fullscreenStateHandler","getViewMode","ViewMode","Fullscreen","fullscreenAvailabilityChangedHandler","isFullScreenAvailable","isViewModeAvailable","ViewModeChanged","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","HugePlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","firstPlay","enterFullscreenOnInitialPlayback","clickTime","doubleClickTime","isAutoplayEnabled","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","playback","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","HugeReplayButton","listselector_1","ItemSelectionList","ListSelector","isActive","items","updateDomItems","selectedValue","selectedListItem","empty","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","labelEvents","onTextChanged","onItemAdded","addListBoxDomItem","onItemRemoved","removeListBoxDomItem","refreshSelectedItem","listBoxElement","createListBoxDomItems","buildListBoxItemButton","ListBoxItemButton","getComponentForKey","c","listBoxItemButton_1","newItem","getItemForKey","handleSelectionChange","onClass","offClass","getItemIndex","parseInt","getItems","sortedInsert","__assign","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","listSelectorEvents","MetadataLabelContent","MetadataLabel","init","content","Title","uiconfig","metadata","title","Description","description","toLowerCase","PictureInPictureToggleButton","pictureInPictureStateHandler","PictureInPicture","pictureInPictureAvailabilityChangedHandler","isPictureInPictureAvailable","PlaybackSpeedSelectBox","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","addDefaultItems","setPlaybackSpeed","parseFloat","PlaybackSpeedChanged","speed","customItems","defaultPlaybackSpeeds","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","minWidth","min-width","updateTimeFormatBasedOnDuration","live","liveCssClass","liveEdgeCssClass","liveClickHandler","timeShift","updateLiveTimeshiftState","isTimeshifted","isTimeshiftAvailable","getTimeShift","getMaxTimeShift","isPaused","liveStreamDetector","PlayerUtils","LiveStreamDetector","playbackTimeHandler","onLiveChanged","isLive","hideInLivePlayback","unsubscribe","detect","getDuration","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","timeFormat","Math","abs","FORMAT_HHMMSS","FORMAT_MMSS","Ready","playbackSeconds","durationSeconds","currentTime","secondsToTime","totalTime","timeLabelMode","CurrentTime","TotalTime","CurrentAndTotalTime","RemainingTime","remainingTime","setTimeFormat","handleClickEvent","playbackStateHandler","isSeeking","updateLiveState","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","PlaybackFinished","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","onAriaLabel","offAriaLabel","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","hugereplaybutton_1","RecommendationOverlay","setupRecommendations","clearRecommendations","recommendations","recommendations_1","RecommendationItem","itemConfig","replayButton","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","duration","ReplayButton","hasEnded","groupplaybackapi_1","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","hasLabel","getLabel","setAriaSliderMinMax","min","max","setAriaSliderValues","ariaValueText","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","playbackPositionPercentage","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","scrubbing","isPlayerSeeking","suspension","playbackPositionHandler","isGroupPlaybackAPIAvailable","hasTimeShift","switchVisibility","setPosition","seekBarBackdrop","SeekBarController","keyStepIncrements","volumeController","setSeekBarControls","forceUpdate","isUserSeeking","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","smoothPlaybackPositionUpdateIntervalMs","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","groupPlayback","hasJoined","beginSuspension","GroupPlaybackSuspensionReason","UserIsScrubbing","onSeekPreview","enableSeekPreview","subscribeRateLimited","seekWhileScrubbing","percentage","proposedPlaybackTime","getTargetSeekPosition","endSuspension","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","snappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","Volume","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","startSmoothPlaybackPositionUpdater","currentTimeSeekBar","stopSmoothPlaybackPositionUpdater","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","seekBarContainer","vertical","seekBarBufferLevel","seekBarPlaybackPosition","seekBarBufferPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","position","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","touches","pageY","pageX","MouseEvent","warn","percent","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","seekBarEvents","snappedMarker","seekPositionPercentage","marker","TouchEvent","seekableRangeStart","maxTimeShift","getSeekableRangeStart","targetPlaybackPosition","leftRight","upDown","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","setTitleText","setThumbnail","uiManager","handleSeekPreview","timeLabel","seconds","titleLabel","thumbnailElement","thumbnailImageLoader","load","x","thumbnailCssSprite","thumbnailCssSingleImage","sizeX","sizeY","offsetX","offsetY","y","aspectRatio","padding-bottom","background-size","background-position","appliedMarkerCssClasses","targetTimeShift","currentTimeShift","timeShiftPreview","wallClockTime","getThumbnail","time","ImageLoader","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","hideHoveredSelectBoxes","hideTimeout","reset","activePage","onInactiveEvent","resetNavigation","onActiveEvent","getRootPage","onSettingsStateChanged","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","pageTransitionAnimation","popToRootSettingsPanelPage","popSettingsPanelPage","navigationStack","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","settingsPanelEvents","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelWidth","settingsPanelHeight","clone","targetSettingsPanelHeight","settingsPanelHTMLElement","get","scrollWidth","scrollHeight","targetPageHtmlElement","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","selectBox_1","oldDisplay_1","setting","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingsPanelItemEvents","onActiveChanged","settingspanelitem_1","settingsStateChangedHandler","lastShownItem","CLASS_LAST","settingsPanelPageEvents","activeItems","onActive","isIOS","isMacIntel","focusToFirstInput","onInactive","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","SettingsPanelPageNavigatorButton","popPage","container","pushTargetPage","SettingsPanelPageOpenButton","SettingsToggleButton","settingsPanel","visibleSettingsPanels","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","subtitleClearHandler","subtitleContainerManager","subtitleManager","clearInactiveCues","toRemove","removeLabel","ActiveSubtitleManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","addLabel","size","forceSubtitlesIntoViewContainer","handleSubtitleCropping","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","detectCroppedSubtitleLabel","parent","childRect","getBoundingClientRect","parentRect","bottom","labelDomElement","cropDetection","removeCss","row","column","SubtitleLabel","generateImageTagText","image","vtt","region","regionStyle","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","fontLetterSpacing","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","fontSize","letter-spacing","CLASS_CEA_608","fontSizeCalculationRequired","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","calculateId","addCueToMap","popCueFromMap","activeSubtitleCueMap","activeSubtitleCueCount","activeSubtitleCues","activeSubtitleCue","removedCues","cue","imageData","imgTag","src","outerHTML","getCues","cueCount","getRegion","regionContainerId","regionName","overlaySize","subtitleRegionContainers","regionContainerId_1","regionContainer","SubtitleRegionContainer","subtitleOverlay","previousLabel","newLabel","labelToAdd","labelCount","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","SubtitleSettingSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","currentCssClass","overlay","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","propertyName","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","save","StorageUtils","setObject","getObject","_instance","_value","onChangedEvent","_onChanged","_manager","manager","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","markers","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","shouldProcessMarkers","validToProcess","hasMarkers","markerPosition","markerDuration","getSeekableRangeRespectingLive","isNaN","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","imageElement_1","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","handler","Destroy","metadatalabel_1","TitleBar","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","keepHiddenWithoutMetadata","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","toggleButtonEvents","onToggleOn","onToggleOff","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","canvasHeight","lastFrameUpdate","canvasWidth","renderFrame","useAnimationFrame","cancelAnimationFrame","clearTimeout","frameUpdateHandlerId","frameInterval","getTime","currentPixelOffset","noiseImage","createImageData","random","interferenceHeight","putImageData","scheduleNextRender","userInteractionEventSource","configureUIShowHide","configurePlayerStates","isFirstTouch","playerState","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","hideUi","previewHideEventArgs","userInteractionEvents","playerStateChange","state","enumName","stateClassNames","PlayerState","STATE_PREFIX","updateState","removeStates","updateLayoutSizeClasses","Idle","Prepared","Finished","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","substring","getContainer","createElement","flex","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","selectCurrentVideoQuality","getVideoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","getVolumeToggleButton","volumeSlider","getVolumeSlider","volumeSliderHovered","volumeSliderHideTimeout","VolumeToggleButton","VolumeSlider","seekbar_1","setVolumeAriaSliderValues","hideIfVolumeControlProhibited","detectVolumeControlAvailability","muted","volume","updateVolumeWhileScrubbing","dummyVideoElement","update","volumeLevelTens","toggleMuted","defaultConfig","VRToggleButton","vrStateHandler","ev","VR_RENDERING_ERROR","isVRConfigured","isVRStereoAvailable","getStereo","vrButtonVisibilityHandler","source","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","subtitleListBox","audioTrackListBox","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","subtitleSettingsPanel","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","findChildElements","findChildElementsOfElement","selector","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","elementRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classNames","classList","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","setCssCollection","elementIndex","removeProperty","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","eventListener","once","shouldFireEvent","rateLimitTimout","fireSuper","rateLimitingEventListener","startRateLimiting","lastSeenEvent","FocusVisibleCssClassName","FocusVisibilityTracker","bitmovinUiPrefix","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","isHtmlElement","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","DOMTokenList","event_1","unregisterEventListeners","event_2","guid","loadedCallback","state_1","loaded","callLoadedCallback","de_json_1","__importDefault","en_json_1","es_json_1","defaultLocalizationConfig","defaultVocabularies","en","default","de","es","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","spatialnavigation_1","navigationgroup_1","SpatialNavigation","rootnavigationgroup_1","NavigationGroup","ListNavigationGroup_1","RootNavigationGroup","ListNavigationGroup","ListOrientation","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","replaybutton_1","TypeError","timeShiftAvailabilityChangedEvent","liveDetector","liveChangedEvent","isAndroid","isChrome","DurationChanged","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailableNow","liveNow","types_1","handleAction","action","Action","SELECT","BACK","handleNavigation","listNavigationDirections","orientation","__spreadArray","Vertical","Direction","UP","DOWN","Horizontal","LEFT","RIGHT","typeguards_1","getHtmlElementsFromComponents","htmlElements","resolveAllComponents","childComponents","containerOrComponent","isContainer","isComponent","isListBox","children","TizenKeyMap","isApplicable","isTizen","keyCodes","38","40","37","39","13","10009","WebOsKeyMap","isWebOs","461","PlayStationKeyMap","isPlayStation","27","AndroidKeyMap","19","20","21","22","23","66","4","HisenseKeyMap","8","DefaultKeyMap","getKeyMapForPlatform","applicableKeyMap","keyMap","vector","sqrt","pow","getElementVector","boundingRect","getBoundingRectFromElement","calculateAngle","b","directionVector","len","elementVector","angleCos","acos","PI","getElementInDirection","activeElement","activeElemVector","elem","dist","angle","_b","angleA","distA","navigationalgorithm_1","gethtmlelementsfromcomponents_1","nodeeventsubscriber_1","removeElementHoverEventListeners","eventSubscriber","NodeEventSubscriber","getActiveElement","focusElement","blurActiveElement","focusFirstElement","defaultNavigationHandler","targetElement","defaultActionHandler","click","handleInput","defaultHandler","userHandler","handleDefault","onNavigation","activeElementBeforeDisable","onAction","isSettingsPanel","trackElementHover","removeEventListenerFunctions","htmlElem","exitListener","enterListener","fn","attachedListeners","Map","getEventListenersOfType","has","set","node","options","listenersOfType","listenerIndex","otherNode","otherListener","otherOptions","SeekBarHandler","rootNavigationGroup","cursorPosition","isScrubbing","scrubSpeedPercentage","isSeekBarWrapper","stopSeeking","getSeekBar","initializeOrUpdateCursorPosition","dispatchMouseMoveEvent","dispatchMouseClickEvent","from","seekBarWrapper","updateScrubSpeedPercentage","scrubSpeedResetTimeout","getIncrement","increment","resetCursorPosition","updateCursorPosition","initializeCursorPosition","playbackPositionMarker","querySelector","rect","startX","startY","getCursorPositionMouseEventInit","clientX","clientY","dispatchEvent","mouseDownHandler","mouseEventInit","dispatchMouseLeaveEvent","seekbarhandler_1","keymap_1","navigationGroups","group","activeNavigationGroups","updateEnabledNavigationGroup","groupIndex","other","handleKeyEvent","active","getActiveNavigationGroup","isDirection","isAction","seekBarHandler","unsubscribeVisibilityChangesFns","subscribeToNavigationGroupVisibilityChanges","attachKeyEventHandler","enableDefaultNavigationGroup","onShowHandler","onHideHandler","unsubscribeFromNavigationGroupVisibilityChanges","unsub","groupToEnable","idx","obj","values","hasLocalStorageCache","setItem","hasLocalStorage","localStorage","getItem","storage","DOMException","JSON","stringify","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","leadingZeroes","numDecimalPlaces","leadingZeroesMatches","decimalPlacesMatches","timeString","toFixed","currentSubtitle","SUBTITLES_OFF_KEY","subtitles","list","subtitle","SubtitleAdded","addSubtitle","selectCurrentSubtitle","SubtitleRemoved","removeSubtitle","clearSubtitles","refreshSubtitles","offListItem","delay","callback","repeat","timeoutOrIntervalId","clearInternal","setInterval","clearInterval","customplaybackbuttons_1","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","playbackControls","modernCastReceiverUI","modernTvUI","subtitleListPanel","audioTrackListPanel","playbackToggleOverlay","subtitleToggleButton","audioToggleButton","uiContainer","spatialNavigation","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","buildDefaultTvUI","buildModernTvUI","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","updateConfig","onUiVariantResolve","onActiveUiChanged","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","uiVariantsWithoutCondition","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariant","InternalUIInstanceManager","resolveUiVariant","adStartedEvent","isLinear","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","previousUi","nextUi","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","matchesCondition","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","wrapper","eventHandlers","eventType","objectProtoPropertyNames","getOwnPropertyNames","getPrototypeOf","namesToIgnore","methods","properties","members_1","names","newNames","member","methods_1","method","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storeVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","VolumeChanged","Muted","Unmuted","controller","setCueBoxPositionForVerticalWriting","cueContainerDom","subtitleOverlaySize","writingMode","Right","Top","setVttLine","setVttPositionAlign","positionAlign","DirectionPair","VttVerticalWriting","defaultLineNumber","Bottom","Left","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","subtitleOverLaySize","targetLine","relativeLinePosition","overlayReferenceEdge","line","snapToLines","cueContainer","GrowingRight","GrowingLeft","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","declare global {\n  interface Navigator {\n    msMaxTouchPoints?: number;\n  }\n}\n\nexport class BrowserUtils {\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent) && !this.isHisense;\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  static get isHisense(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Hisense/.test(navigator.userAgent);\n  }\n\n  static get isPlayStation(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /PlayStation/i.test(navigator.userAgent);\n  }\n\n  static get isWebOs(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return (\n      navigator &&\n      navigator.userAgent &&\n      (navigator.userAgent.includes('Web0S') || navigator.userAgent.includes('NetCast'))\n    );\n  }\n\n  static get isTizen(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Tizen/.test(navigator.userAgent);\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n      role: 'button',\n      tabIndex: 0,\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      'id': this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      'class': this.getCssClasses(),\n      'type' : 'button',\n      /**\n      * WCAG20 standard to display if a button is pressed or not\n      */\n      'aria-pressed': 'false',\n      'tabindex': this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-casttogglebutton',\n      text: i18n.getLocalizer('googleCast'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isCastAvailable()) {\n        if (player.isCasting()) {\n          player.castStop();\n        } else {\n          player.castVideo();\n        }\n      } else {\n        if (console) {\n          console.log('Cast unavailable');\n        }\n      }\n    });\n\n    let castAvailableHander = () => {\n      if (player.isCastAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    castAvailableHander(); // Hide button if Cast not available\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: i18n.getLocalizer('close'),\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  /**\n   * Checks if this component has a DOM element.\n   */\n  hasDomElement(): boolean {\n    return Boolean(this.element);\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport {Component, ComponentConfig} from './component';\nimport {SettingsPanel} from './settingspanel';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n    let isSettingsPanelShown = false;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    if (BrowserUtils.isMobile) {\n      uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = true;\n        }\n      });\n\n      uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n        if (component instanceof SettingsPanel) {\n          isSettingsPanelShown = false;\n        }\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding or if the settings panel is active on mobile.\n      args.cancel = args.cancel || (hoverStackCount > 0 || isSettingsPanelShown);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\n\nimport { DOM } from '../dom';\nimport { UIInstanceManager } from '../uimanager';\nimport {\n  Component,\n  ComponentConfig,\n} from './component';\nimport { PlaybackToggleButton } from './playbacktogglebutton';\n\nexport class CustomPlaybackButtons extends Component<ComponentConfig> {\n  private playbackToggleButton: PlaybackToggleButton;\n\n  // render forwad and backward buttons and play/pause button\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n    this.playbackToggleButton = new PlaybackToggleButton();\n\n    this.config = this.mergeConfig(\n      config,\n      {\n        cssClass: \"ui-custom-playback-buttons\",\n      },\n      this.config\n    );\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager);\n\n    // play/pause button\n    this.playbackToggleButton.configure(player, uimanager);\n\n    // forward button\n    let forwardButton = this.getDomElement().find(\".ui-forward-button\");\n    forwardButton.on(\"click\", () => {\n      player.seek(player.getCurrentTime() + 10);\n    });\n\n    // rewind button\n    let rewindButton = this.getDomElement().find(\".ui-rewind-button\");\n    rewindButton.on(\"click\", () => {\n      player.seek(player.getCurrentTime() - 10);\n    });\n  }\n\n  // render the buttons\n  protected toDomElement(): DOM {\n    let dom = super.toDomElement();\n    // append the rewind button\n    let rewindButton = new DOM(\"button\", {\n      class: \"ui-rewind-button\",\n      role: \"button\",\n      \"aria-label\": \"Rewind 10 seconds\",\n    }).append(\n      new DOM(\"span\", {\n        class: \"rewind-icon\",\n      })\n    );\n\n    dom.append(rewindButton);\n\n    // append the play/pause button\n    dom.append(this.playbackToggleButton.getDomElement());\n\n    // append the forward button\n    let forwardButton = new DOM(\"button\", {\n      class: \"ui-forward-button\",\n      role: \"button\",\n      \"aria-label\": \"Forward 10 seconds\",\n    }).append(\n      new DOM(\"span\", {\n        class: \"forward-icon\",\n      })\n    );\n    dom.append(forwardButton);\n\n    return dom;\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.display(message);\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  display(errorMessage: string): void {\n    this.errorLabel.setText(errorMessage);\n    this.tvNoiseBackground.start();\n    this.show();\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {PlaybackToggleButton, PlaybackToggleButtonConfig} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n\n        if (this.config.enterFullscreenOnInitialPlayback) {\n          player.setViewMode(player.exports.ViewMode.Fullscreen);\n        }\n\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\n          player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    let updateTimeFormatBasedOnDuration = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n      StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      playbackTimeHandler();\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      updateTimeFormatBasedOnDuration();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport interface PlaybackToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<PlaybackToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: PlaybackToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    // Set enterFullscreenOnInitialPlayback if set in the uimanager config\n    if (typeof uimanager.getConfig().enterFullscreenOnInitialPlayback === 'boolean') {\n      this.config.enterFullscreenOnInitialPlayback = uimanager.getConfig().enterFullscreenOnInitialPlayback;\n    }\n\n    let isSeeking = false;\n    let firstPlay = true;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      firstPlay = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        firstPlay = true;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n\n          if (firstPlay && this.config.enterFullscreenOnInitialPlayback) {\n            player.setViewMode(player.exports.ViewMode.Fullscreen);\n          }\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\nexport interface PlaybackToggleOverlayConfig extends ContainerConfig {\n  /**\n   * Specify whether the player should be set to enter fullscreen by clicking on the playback toggle button\n   * when initiating the initial playback.\n   * Default is false.\n   */\n  enterFullscreenOnInitialPlayback?: boolean;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<PlaybackToggleOverlayConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: PlaybackToggleOverlayConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton({\n      enterFullscreenOnInitialPlayback: Boolean(config.enterFullscreenOnInitialPlayback),\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { PlayerUtils } from '../playerutils';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\n\n/**\n * A button to play/replay a video.\n */\nexport class ReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-replaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (player.isLive()) {\n      this.hide();\n    }\n\n    const liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      if (args.live) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    this.onClick.subscribe(() => {\n      if (!player.hasEnded()) {\n        player.seek(0);\n        // Not calling `play` will keep the play/pause state as is\n      } else {\n        // If playback has already ended, calling `play` will automatically restart from the beginning\n        player.play('ui');\n      }\n    });\n  }\n}\n","import { ExtendedPlayerAPI, GroupPlaybackSuspension, GroupPlaybackSuspensionReason } from './../groupplaybackapi';\nimport { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number, upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n      keyStepIncrements,\n      ariaLabel: i18n.getLocalizer('seekBar'),\n      tabIndex: 0,\n      snappingRange: 1,\n      enableSeekPreview: true,\n    }, this.config);\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\n    }\n\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n    let suspension: GroupPlaybackSuspension | undefined;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (scrubbing && event && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n            || forceUpdate || player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    let isGroupPlaybackAPIAvailable = (player: PlayerAPI): player is ExtendedPlayerAPI => {\n      return !!(player as ExtendedPlayerAPI).groupPlayback;\n    };\n\n    this.onSeek.subscribe((sender) => {\n      // track seeking status so we can catch events from seek preview seeks\n      this.isUserSeeking = true;\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && !suspension) {\n        suspension = player.groupPlayback.beginSuspension(GroupPlaybackSuspensionReason.UserIsScrubbing);\n      }\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n    });\n\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n\n      if (isGroupPlaybackAPIAvailable(player) && player.groupPlayback.hasJoined() && suspension) {\n        const proposedPlaybackTime = this.getTargetSeekPosition(percentage);\n        player.groupPlayback.endSuspension(suspension, { proposedPlaybackTime });\n        suspension = undefined;\n      }\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n      hasTimeShift = args.timeShiftAvailable;\n      switchVisibility(isLive, hasTimeShift);\n    });\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private getTargetSeekPosition = (percentage: number) => {\n    let target: number;\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      target = maxTimeShift - (maxTimeShift * (percentage / 100));\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      target = relativeSeekTarget + seekableRangeStart;\n    }\n\n    return target;\n  }\n\n  private seek = (percentage: number) => {\n    const targetPlaybackPosition = this.getTargetSeekPosition(percentage);\n    if (this.player.isLive()) {\n      this.player.timeShift(targetPlaybackPosition, 'ui');\n    } else {\n      this.player.seek(targetPlaybackPosition, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      if (this.isSeeking()) {\n        return;\n      }\n\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      'tabindex': this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n      role: 'pop-up button',\n    }, <SettingsToggleButtonConfig>this.config);\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\ninterface SubtitleCropDetectionResult {\n  top: boolean;\n  right: boolean;\n  bottom: boolean;\n  left: boolean;\n}\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n\n      if (uimanager.getConfig().forceSubtitlesIntoViewContainer) {\n        this.handleSubtitleCropping(label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    const clearInactiveCues = () => {\n      const removedActiveCues = subtitleManager.clearInactiveCues(player.getCurrentTime());\n      removedActiveCues.forEach(toRemove => {\n        this.subtitleContainerManager.removeLabel(toRemove.label);\n      });\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seeked, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.TimeShifted, clearInactiveCues);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  detectCroppedSubtitleLabel(\n    labelElement: HTMLElement,\n  ): SubtitleCropDetectionResult {\n    const parent = this.getDomElement().get(0);\n\n    const childRect = labelElement.getBoundingClientRect();\n    const parentRect = parent.getBoundingClientRect();\n\n    return {\n      top: childRect.top < parentRect.top,\n      right: childRect.right > parentRect.right,\n      bottom: childRect.bottom > parentRect.bottom,\n      left: childRect.left < parentRect.left,\n    };\n  }\n\n  handleSubtitleCropping(label: SubtitleLabel) {\n    const labelDomElement = label.getDomElement();\n    const cropDetection = this.detectCroppedSubtitleLabel(\n      labelDomElement.get(0),\n    );\n\n    if (cropDetection.top) {\n      labelDomElement.css('top', '0');\n      labelDomElement.removeCss('bottom');\n    }\n\n    if (cropDetection.right) {\n      labelDomElement.css('right', '0');\n      labelDomElement.removeCss('left');\n    }\n\n    if (cropDetection.bottom) {\n      labelDomElement.css('bottom', '0');\n      labelDomElement.removeCss('top');\n    }\n\n    if (cropDetection.left) {\n      labelDomElement.css('left', '0');\n      labelDomElement.removeCss('right');\n    }\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  /**\n   * Removes all active cues which don't enclose the given time\n   * @param time the time for which subtitles should remain\n   */\n  public clearInactiveCues(time: number): ActiveSubtitleCue[] {\n    const removedCues: ActiveSubtitleCue[] = [];\n    Object.keys(this.activeSubtitleCueMap).forEach(key => {\n      const activeCues = this.activeSubtitleCueMap[key];\n      activeCues.forEach(cue => {\n        if (time < cue.event.start || time > cue.event.end) {\n          this.popCueFromMap(cue.event);\n          removedCues.push(cue);\n        }\n      });\n    });\n    return removedCues;\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalsansserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  public hideUi: () => void = () => {};\n  public showUi: () => void = () => {};\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('player'),\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    this.showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    this.hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          this.showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, this.hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          this.showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'focusin',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      name: 'keydown',\n      handler: () => {\n        this.showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      this.showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        this.showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, videoQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  /**\n   * Removes an inline CSS property if it exists\n   * @param propertyName name of the property to remove\n   * @param elementIndex index of the element whose CSS property should get removed\n   */\n  removeCss(propertyName: string, elementIndex = 0): string {\n    return this.elements[elementIndex].style.removeProperty(propertyName);\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","import { PlayerAPI } from 'bitmovin-player';\n/**\n * The Group Playback API offers control over synchronized playback of a group of clients, e.g. for Apple SharePlay\n * sessions.\n\n * Note: The API currently only covers the immediate needs of the iOS SDK in combination with our UI which is regarding\n * temporarily suspending synchronization of the player from the group. But it is open to be extended as needed in the\n * future.\n */\n\n/**\n * Reason for suspending the synchronization with the group.\n */\nexport enum GroupPlaybackSuspensionReason {\n  UserIsScrubbing = 'userIsScrubbing',\n}\n\n/**\n * A representation of a temporary break in participation.\n */\nexport interface GroupPlaybackSuspension {\n  /**\n   * The reason for the suspension.\n   */\n  reason: GroupPlaybackSuspensionReason;\n\n  /**\n   * A unique identifier.\n   */\n  id: string;\n}\n\n/**\n * Options to be considered upon ending a suspension.\n */\ninterface EndGroupPlaybackSuspensionOptions {\n  /**\n   * A proposed time for the group to seek to.\n   */\n  proposedPlaybackTime?: number;\n}\n\n/**\n * Group Playback API offering control over the player's participation in synchronized playback of a group of clients.\n * For example, an Apple SharePlay session.\n */\ninterface GroupPlaybackAPI {\n  /**\n   * Begins a new suspension.\n   *\n   * Temporarily suspends the local player's synchronization with the group. While suspended, any local playback control\n   * action (e.g. play, pause, seek) will not be forwarded to the group and any action originating from another group\n   * participant will not be performed on the local player.\n   *\n   * @remarks\n   * It is possible for multiple suspensions to exist exist simultaneously with different suspension reasons. The player\n   * will re-synchronize with the group once all existing suspensions have ended.\n   *\n   * @param reason - The reason for the suspension.\n   * @returns A suspension object.\n   */\n  beginSuspension(reason: GroupPlaybackSuspensionReason): GroupPlaybackSuspension;\n\n  /**\n   * Ends the given suspension.\n   *\n   * @param suspension - The suspension to be ended.\n   * @param options - Optional. Options to be considered when ending the suspension, e.g. a proposed seek time for the group.\n   */\n  endSuspension(suspension: GroupPlaybackSuspension, options?: EndGroupPlaybackSuspensionOptions): void;\n\n  /**\n   * Whether the player is currently participating in a group playback session.\n   */\n  hasJoined(): boolean;\n\n  /**\n   * Whether the player is currently suspending synchronization with the group.\n   * Can only return true if `hasJoined()` also is true.\n   */\n  isSuspended(): boolean;\n}\n\n\nexport interface ExtendedPlayerAPI extends PlayerAPI {\n  /**\n   * Group Playback API\n   *\n   * @remarks\n   * This API is optional as not every platform supports group playback.\n   */\n  groupPlayback?: GroupPlaybackAPI;\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport vocabularyEs from './languages/es.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n  'es': vocabularyEs,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Mute\",\n  \"settings.audio.volume\" : \"Volume\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Calidad de Video\",\n  \"settings.audio.quality\": \"Calidad de Audio\",\n  \"settings.audio.track\": \"Pista de Audio\",\n  \"settings.audio.mute\" : \"Silencio\",\n  \"settings.audio.volume\" : \"Volumen\",\n  \"settings.subtitles.window.color\" : \"color de Ventana\",\n  \"settings.subtitles.window.opacity\" : \"opacidad de Ventana\",\n  \"settings.subtitles\" : \"Subtítulos\",\n  \"settings.subtitles.font.color\" : \"color de Fuente\",\n  \"settings.subtitles.font.opacity\" : \"opacidad de Fuente\",\n  \"settings.subtitles.background.color\" : \"color de Fondo\",\n  \"settings.subtitles.background.opacity\": \"opacidad de Fondo\",\n  \"colors.white\": \"blanco\",\n  \"colors.black\": \"negro\",\n  \"colors.red\": \"rojo\",\n  \"colors.green\": \"verde\",\n  \"colors.blue\": \"azul\",\n  \"colors.cyan\": \"cian\",\n  \"colors.yellow\": \"amarillo\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"tamaño de Fuente\",\n  \"settings.subtitles.characterEdge\": \"borde del Caracter\",\n  \"settings.subtitles.characterEdge.raised\": \"alzado\",\n  \"settings.subtitles.characterEdge.depressed\": \"discreto\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniforme\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"sombreado\",\n  \"settings.subtitles.font.family\": \"tipo de Fuente\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursiva\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Horas\",\n  \"settings.time.minutes\": \"Minutos\",\n  \"settings.time.seconds\": \"Segundos\",\n  \"ads.remainingTime\": \"Este anuncio acabará en {remainingTime} segundos.\",\n  \"settings\": \"Configuración\",\n  \"fullscreen\" : \"Pantalla Completa\",\n  \"speed\": \"Velocidad\",\n  \"playPause\" : \"Reproducir/Pausa\",\n  \"play\": \"Reproducir\",\n  \"pause\": \"Pausa\",\n  \"open\": \"Abrir\",\n  \"close\": \"Cerrar\",\n  \"pictureInPicture\": \"Imagen en Imagen\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Atrás\",\n  \"reset\": \"Reiniciar\",\n  \"replay\": \"Rebobinar\",\n  \"normal\": \"normal\",\n  \"default\": \"predeterminado\",\n  \"live\": \"Directo\",\n  \"subtitle.example\": \"Ejemplo de Subtítulo\",\n  \"subtitle.select\": \"Seleccionar subtítulo\",\n  \"playingOn\": \"Reproduciendo en <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando a <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Enlace al inicio\",\n  \"controlBar\": \"Controles del Reproductor\",\n  \"player\": \"Reproductor de Video\",\n  \"seekBar\": \"Línea de Tiempo\",\n  \"seekBar.value\": \"posición\",\n  \"seekBar.timeshift\": \"cambio de posición\",\n  \"seekBar.durationText\": \"de\"\n}","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Localization\nexport { i18n } from './localization/i18n';\n// Spatial Navigation\nexport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nexport { NavigationGroup } from './spatialnavigation/navigationgroup';\nexport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nexport { ListNavigationGroup, ListOrientation } from './spatialnavigation/ListNavigationGroup';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\nexport { ReplayButton } from './components/replaybutton';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Action, Direction } from './types';\nimport { Container } from '../components/container';\nimport { Component } from '../components/component';\n\nexport enum ListOrientation {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport class ListNavigationGroup extends NavigationGroup {\n  private readonly listNavigationDirections: Direction[];\n\n  constructor(orientation: ListOrientation, container: Container<unknown>, ...components: Component<unknown>[]) {\n    super(container, ...components);\n\n    switch (orientation) {\n      case ListOrientation.Vertical:\n        this.listNavigationDirections = [Direction.UP, Direction.DOWN];\n        break;\n\n      case ListOrientation.Horizontal:\n        this.listNavigationDirections = [Direction.LEFT, Direction.RIGHT];\n        break;\n    }\n  }\n\n  public handleAction(action: Action): void {\n    super.handleAction(action);\n\n    if (action === Action.SELECT) {\n      // close the container when a list entry is selected\n      this.handleAction(Action.BACK);\n    }\n  }\n\n  public handleNavigation(direction: Direction): void {\n    super.handleNavigation(direction);\n\n    if (!this.listNavigationDirections.includes(direction)) {\n      // close the container on navigation inputs that don't align\n      // with the orientation of the list\n      this.handleAction(Action.BACK);\n    }\n  }\n}\n","import { Component } from '../components/component';\nimport { Container } from '../components/container';\nimport { isComponent, isContainer, isListBox } from './typeguards';\n\n/**\n * Recursively resolves a container and the components contained within them, building a flat list of components.\n *\n * @param container The container to get the contained components from\n */\nfunction resolveAllComponents(container: Container<unknown>): Component<unknown>[] {\n  const childComponents: Component<unknown>[] = [];\n\n  container.getComponents().forEach(containerOrComponent => {\n    if (isContainer(containerOrComponent)) {\n      childComponents.push(...resolveAllComponents(containerOrComponent));\n    } else if (isComponent(containerOrComponent)) {\n      childComponents.push(containerOrComponent);\n    }\n  });\n\n  return childComponents;\n}\n\n/**\n * Returns the HTML elements associated to the provided component.\n *\n * @param component The component to get the HTML elements from\n */\nfunction toHtmlElement(component: Component<unknown>): HTMLElement[] {\n  if (isListBox(component)) {\n    return [].slice.call(component.getDomElement().get()[0].children);\n  } else {\n    return component.getDomElement().get().slice(0, 1);\n  }\n}\n\n/**\n * Takes the provided list of components and flat-maps them to a list of their respective HTML elements. In case a\n * provided component is a container, the children of that container will be resolved recursively. Ignores components\n * that are hidden.\n *\n * @param components The components to map to HTML elements\n */\nexport function getHtmlElementsFromComponents(components: Component<unknown>[]): HTMLElement[] {\n  const htmlElements: HTMLElement[] = [];\n\n  components\n    .filter(component => !component.isHidden())\n    .forEach(component => {\n      const elementsToConsider = component instanceof Container ? resolveAllComponents(component) : [component];\n\n      elementsToConsider.forEach(component => {\n        htmlElements.push(...toHtmlElement(component));\n      });\n    });\n\n  return htmlElements;\n}\n","import { Action, Direction, KeyMap } from './types';\nimport { BrowserUtils } from '../browserutils';\n\nconst TizenKeyMap = {\n  isApplicable: () => BrowserUtils.isTizen,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    10009: Action.BACK,\n  },\n};\n\nconst WebOsKeyMap = {\n  isApplicable: () => BrowserUtils.isWebOs,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // D-pad OK\n    13: Action.SELECT,\n    // Back\n    461: Action.BACK,\n  },\n};\n\nconst PlayStationKeyMap = {\n  isApplicable: () => BrowserUtils.isPlayStation,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // Cross\n    13: Action.SELECT,\n    // Circle\n    27: Action.BACK,\n  },\n};\n\nconst AndroidKeyMap = {\n  isApplicable: () => BrowserUtils.isAndroid,\n  keyCodes: {\n    // D-pad Up\n    19: Direction.UP,\n    // D-pad Down\n    20: Direction.DOWN,\n    // D-pad Left\n    21: Direction.LEFT,\n    // D-pad Right\n    22: Direction.RIGHT,\n    // D-pad Center\n    23: Action.SELECT,\n    // Enter\n    66: Action.SELECT,\n    // Back\n    4: Action.BACK,\n  },\n};\n\nconst HisenseKeyMap = {\n  isApplicable: () => BrowserUtils.isHisense,\n  keyCodes: {\n    // D-pad Up\n    38: Direction.UP,\n    // D-pad Down\n    40: Direction.DOWN,\n    // D-pad Left\n    37: Direction.LEFT,\n    // D-pad Right\n    39: Direction.RIGHT,\n    // OK\n    13: Action.SELECT,\n    // Back\n    8: Action.BACK,\n  },\n};\n\n// Default key map used on desktops\nconst DefaultKeyMap = {\n  // Arrow Up\n  38: Direction.UP,\n  // Arrow Down\n  40: Direction.DOWN,\n  // Arrow Left\n  37: Direction.LEFT,\n  // Arrow Right\n  39: Direction.RIGHT,\n  // Enter\n  13: Action.SELECT,\n  // Escape\n  27: Action.BACK,\n};\n\n/**\n * Returns the matching key map for the current platform.\n */\nexport function getKeyMapForPlatform(): KeyMap {\n  const applicableKeyMap = [\n    WebOsKeyMap,\n    TizenKeyMap,\n    PlayStationKeyMap,\n    HisenseKeyMap,\n    AndroidKeyMap,\n  ].find(keyMap => keyMap.isApplicable());\n\n  if (applicableKeyMap) {\n    return applicableKeyMap.keyCodes;\n  } else {\n    return DefaultKeyMap;\n  }\n}\n","import { Direction } from './types';\n\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Calculates the length of a vector.\n *\n * @param vector The vector to calculate the length of\n */\nfunction length(vector: Vector): number {\n  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n}\n\n/**\n * Normalizes the given vector.\n *\n * @param vector The vector to normalize\n */\nfunction normalize(vector: Vector): Vector {\n  const len = length(vector);\n\n  return {\n    x: vector.x / len,\n    y: vector.y / len,\n  };\n}\n\n/**\n * Calculates the dot product between 2 vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction dotProduct(a: Vector, b: Vector): number {\n  return a.x * b.x + a.y * b.y;\n}\n\n/**\n * Calculates the distance between the 2 points pointed to by the provided vectors.\n *\n * @param a The first vector\n * @param b The second vector\n */\nfunction distance(a: Vector, b: Vector): number {\n  return length({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n}\n\n/**\n * Returns a vector that corresponds to the center of the provided element.\n *\n * @param element The element to get the center of\n */\nfunction getElementVector(element: HTMLElement): Vector {\n  const boundingRect = getBoundingRectFromElement(element);\n\n  return {\n    x: boundingRect.x + boundingRect.width / 2,\n    y: boundingRect.y + boundingRect.height / 2,\n  };\n}\n\n/**\n * Returns the angle in degrees between the unit vector pointing in the given {Direction} and the unit vector that\n * points from the current element to another element.\n *\n * @param a The vector of the current element\n * @param b The vector of the other element\n * @param direction The direction to move along\n */\nfunction calculateAngle(a: Vector, b: Vector, direction: Direction): number {\n  const directionVector = {\n    x: (direction === Direction.LEFT ? -1 : direction === Direction.RIGHT ? 1 : 0),\n    y: (direction === Direction.UP ? -1 : direction === Direction.DOWN ? 1 : 0),\n  };\n\n  const elementVector = normalize({\n    x: b.x - a.x,\n    y: b.y - a.y,\n  });\n\n  const angleCos = dotProduct(directionVector, elementVector) / (length(directionVector) * length(elementVector));\n\n  return Math.acos(angleCos) * 180 / Math.PI;\n}\n\n/**\n * Returns the closest element to the current element when trying to navigate in the provided direction. Returns\n * undefined, if there is not element in the given direction.\n *\n * @param activeElement The currently selected element\n * @param elements The list of all elements that can be navigated to\n * @param direction The direction in which to navigate\n */\nexport function getElementInDirection(\n  activeElement: HTMLElement,\n  elements: HTMLElement[],\n  direction: Direction,\n): HTMLElement | undefined {\n  if (!activeElement) return undefined;\n\n  const cutoffAngle = 45;\n  const activeElemVector = getElementVector(activeElement);\n\n  return elements\n    // don't take the current element into account\n    .filter(elem => elem !== activeElement)\n    // get the angle between, and distance to any other element from the current element\n    .map(element => {\n      const elementVector = getElementVector(element);\n      const dist = distance(activeElemVector, elementVector);\n      const angle = calculateAngle(activeElemVector, elementVector, direction);\n\n      return { angle, dist, element };\n    })\n    // filter out any elements that don't align with the direction we're trying to move in\n    .filter(({ angle }) => angle <= cutoffAngle)\n    // sort the resulting elements based on their distance to the current element in ascending order\n    .sort(({ angle: angleA, dist: distA }, { angle: angleB, dist: distB }) => (angleA - angleB) + (distA - distB))\n    // return the element closest to the current element\n    .shift()?.element;\n}\n\n/**\n * Returns DOMRect like object containing horizontal X and vertical Y coordinates from and HTMLElement.\n * Handles use-cases for getBoundingClientRect when the return type can be either\n * a ClientRect or DOMRect object type.\n *\n * @param element The currently selected element\n */\nexport function getBoundingRectFromElement(element: HTMLElement) {\n  const boundingRect = element.getBoundingClientRect();\n\n  if (typeof boundingRect.x !== 'number' && typeof boundingRect.y !== 'number') {\n    boundingRect.x = boundingRect.left;\n    boundingRect.y = boundingRect.top;\n  }\n\n  return boundingRect;\n}\n\n","import { Container } from '../components/container';\nimport { Component } from '../components/component';\nimport { getElementInDirection } from './navigationalgorithm';\nimport { getHtmlElementsFromComponents } from './gethtmlelementsfromcomponents';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { isSettingsPanel } from './typeguards';\nimport { Action, ActionCallback, Callback, Direction, NavigationCallback } from './types';\n\n/**\n * Used as part of spatial navigation. Groups together different components to which you can navigate to, in a single\n * navigation group.\n *\n * Responsible for finding elements in direction on navigation and for tracking active element inside the group.\n * Triggers blur and focus on element when active element is changed, as well as click on element on `Action.SELECT`.\n * Will call `hideUi()` on passed in container if `Action.BACK` is called.\n */\nexport class NavigationGroup {\n  private activeElement?: HTMLElement;\n  private activeElementBeforeDisable?: HTMLElement;\n  private readonly components: Component<unknown>[];\n  private removeElementHoverEventListeners = () => {};\n  private readonly eventSubscriber: NodeEventSubscriber;\n\n  constructor(public readonly container: Container<unknown>, ...components: Component<unknown>[]) {\n    this.components = components;\n    this.eventSubscriber = new NodeEventSubscriber();\n  }\n\n  /**\n   * If overwritten, allows to implement custom navigation behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default navigation handler, call `preventDefault()`;\n   *\n   * @param direction {Direction} The direction to move along\n   * @param target {HTMLElement} The target element for the event\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onNavigation?: NavigationCallback;\n\n  /**\n   * If overwritten, allows to implement custom action behavior. Per default, the internal handler will still be\n   * executed. To prevent execution of the default action handler, call `preventDefault()`;\n   *\n   * @param action {Action} The action that was called\n   * @param target {HTMLElement} The target element that action was called on\n   * @param preventDefault {() => void} A function that, when called, will prevent the execution of the default handler\n   */\n  public onAction?: ActionCallback;\n\n  /**\n   * Returns the active HTMLElement.\n   */\n  public getActiveElement(): HTMLElement | undefined {\n    return this.activeElement;\n  }\n\n  private focusElement(element: HTMLElement): void {\n    this.blurActiveElement();\n    this.activeElement = element;\n    this.activeElement.focus();\n  }\n\n  private blurActiveElement(): void {\n    this.activeElement?.blur();\n  }\n\n  private focusFirstElement(): void {\n    const element = getHtmlElementsFromComponents(this.components)[0];\n    if (element) {\n      this.focusElement(element);\n    }\n  }\n\n  protected defaultNavigationHandler(direction: Direction): void {\n    const targetElement = getElementInDirection(\n      this.activeElement,\n      getHtmlElementsFromComponents(this.components),\n      direction,\n    );\n\n    if (targetElement) {\n      this.focusElement(targetElement);\n    }\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    switch (action) {\n      case(Action.SELECT):\n        this.activeElement.click();\n        break;\n      case(Action.BACK):\n        this.container.hide();\n        break;\n    }\n  }\n\n  private handleInput<T>(data: T, defaultHandler: (data: T) => void, userHandler?: Callback<T>): void {\n    let handleDefault = true;\n    const preventDefault = () => (handleDefault = false);\n\n    userHandler?.(data, this.activeElement, preventDefault);\n\n    if (handleDefault) {\n      defaultHandler.call(this, data);\n    }\n  }\n\n  /**\n   * Handles a navigation event.\n   *\n   * @param direction The direction of the navigation event\n   */\n  public handleNavigation(direction: Direction): void {\n    if (!this.activeElement) {\n      // If we do not have an active element, the active element has been disabled by a mouseleave\n      // event. We should continue the navigation at the exact place where we left off.\n      if (this.activeElementBeforeDisable) {\n        this.focusElement(this.activeElementBeforeDisable);\n      } else {\n        this.focusFirstElement();\n      }\n      return;\n    }\n    this.handleInput(direction, this.defaultNavigationHandler, this.onNavigation);\n  }\n\n  /**\n   * Handles an action event.\n   *\n   * @param action The action of the event\n   */\n  public handleAction(action: Action): void {\n    this.handleInput(action, this.defaultActionHandler, this.onAction);\n  }\n\n  /**\n   * Disable navigation group\n   *\n   * Call blur on active element, set as undefined, and track it as element before disable.\n   */\n  public disable(): void {\n    if (this.activeElement) {\n      this.activeElementBeforeDisable = this.activeElement;\n      this.blurActiveElement();\n      this.activeElement = undefined;\n    }\n  }\n\n  /**\n   * Enable navigation group\n   *\n   * Sets active element to either element that was active before disable, or first element of tracked elements.\n   * If it is settings panel, it will always focus first element in the list.\n   */\n  public enable(): void {\n    if (this.activeElementBeforeDisable && !isSettingsPanel(this.container)) {\n      this.focusElement(this.activeElementBeforeDisable);\n      this.activeElementBeforeDisable = undefined;\n    } else {\n      this.focusFirstElement();\n    }\n\n    this.trackElementHover();\n  }\n\n  /**\n   * Adds event listener for `mouseenter` on tracked elements to ensure tracking of active element will work together\n   * in combination of using mouse and key events.\n   */\n  private trackElementHover(): void {\n    this.removeElementHoverEventListeners();\n\n    const removeEventListenerFunctions = getHtmlElementsFromComponents(this.components).map(htmlElem => {\n      const enterListener = this.focusElement.bind(this, htmlElem);\n      const exitListener = () => this.disable();\n\n      this.eventSubscriber.on(htmlElem, 'mouseenter', enterListener);\n      this.eventSubscriber.on(htmlElem, 'mouseleave', exitListener);\n\n      return () => {\n        this.eventSubscriber.off(htmlElem, 'mouseenter', enterListener);\n        this.eventSubscriber.off(htmlElem, 'mouseleave', exitListener);\n      };\n    });\n\n    this.removeElementHoverEventListeners = () => removeEventListenerFunctions.forEach(fn => fn());\n  }\n\n  /**\n   * Dispose of navigation group\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.activeElement = undefined;\n    this.components.splice(0, this.components.length);\n    this.removeElementHoverEventListeners();\n  }\n}\n","type Listeners = ([Node, EventListenerOrEventListenerObject, boolean | AddEventListenerOptions])[];\n\n/**\n * Allows to subscribe to Node events.\n */\nexport class NodeEventSubscriber {\n  private readonly attachedListeners: Map<keyof HTMLElementEventMap, Listeners>;\n\n  constructor() {\n    this.attachedListeners = new Map();\n  }\n\n  private getEventListenersOfType(type: keyof HTMLElementEventMap): Listeners {\n    if (!this.attachedListeners.has(type)) {\n      this.attachedListeners.set(type, []);\n    }\n\n    return this.attachedListeners.get(type);\n  }\n\n  /**\n   * Adds the given event listener to the node.\n   *\n   * @param node The node to remove the event listener from\n   * @param type The event to listen to\n   * @param listener The listener to remove\n   * @param options The event listener options\n   */\n  public on(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    node.addEventListener(type, listener, options);\n    this.getEventListenersOfType(type).push([node, listener, options]);\n  }\n\n  /**\n   * Removes the given event listener from the node.\n   *\n   * @param node The node to attach the event listener to\n   * @param type The event to listen to\n   * @param listener The listener to add\n   * @param options The event listener options\n   */\n  public off(\n    node: Node,\n    type: keyof HTMLElementEventMap,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    const listenersOfType = this.getEventListenersOfType(type);\n    const listenerIndex = listenersOfType.findIndex(([otherNode, otherListener, otherOptions]) => {\n      return otherNode === node && otherListener === listener && otherOptions === options;\n    });\n\n    node.removeEventListener(type, listener, options);\n\n    if (listenerIndex > -1) {\n      listenersOfType.splice(listenerIndex, 1);\n    }\n  }\n\n  /**\n   * Removes all attached event listeners.\n   */\n  public release(): void {\n    this.attachedListeners.forEach((listenersOfType, type) => {\n      listenersOfType.forEach(([element, listener, options]) => {\n        this.off(element, type, listener, options);\n      });\n    });\n    this.attachedListeners.clear();\n  }\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { Component } from '../components/component';\nimport { UIContainer } from '../components/uicontainer';\nimport { Action, Direction } from './types';\n\n/**\n * Extends NavigationGroup and provides additional logic for hiding and showing the UI on the root container.\n */\nexport class RootNavigationGroup extends NavigationGroup {\n  constructor(public readonly container: UIContainer, ...elements: Component<unknown>[]) {\n    super(container, ...elements);\n  }\n\n  public handleAction(action: Action) {\n    this.container.showUi();\n\n    super.handleAction(action);\n  }\n\n  public handleNavigation(direction: Direction) {\n    this.container.showUi();\n\n    super.handleNavigation(direction);\n  }\n\n  protected defaultActionHandler(action: Action): void {\n    if (action === Action.BACK) {\n      this.container.hideUi();\n    } else {\n      super.defaultActionHandler(action);\n    }\n  }\n\n  public release(): void {\n    super.release();\n  }\n}\n","import { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { Action, Direction } from './types';\nimport {getBoundingRectFromElement} from './navigationalgorithm';\n\nconst DefaultScrubSpeedPercentage = 0.005;\nconst ScrubSpeedClearInterval = 100;\nconst ScrubSpeedMultiplier = 1.1;\n\n/**\n * Handles Spatial Navigation interaction with the seek bar. Ensures, that seek operations can be executed and that the\n * scrubbing tooltip is shown as if the user scrubbed using the mouse/touchscreen.\n */\nexport class SeekBarHandler {\n  private readonly cursorPosition = { x: 0, y: 0};\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private isScrubbing = false;\n  private scrubSpeedResetTimeout: number;\n  private scrubSpeedPercentage = DefaultScrubSpeedPercentage;\n\n  constructor(private readonly rootNavigationGroup: RootNavigationGroup) {\n    this.rootNavigationGroup.onAction = this.onAction;\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.rootNavigationGroup.onNavigation = this.onNavigation;\n  }\n\n  private updateScrubSpeedPercentage(): void {\n    clearTimeout(this.scrubSpeedResetTimeout);\n    this.scrubSpeedPercentage *= ScrubSpeedMultiplier;\n    this.scrubSpeedResetTimeout = window.setTimeout(\n      () => this.scrubSpeedPercentage = DefaultScrubSpeedPercentage, ScrubSpeedClearInterval,\n    );\n  }\n\n  private getIncrement(direction: Direction, seekBarWrapper: HTMLElement): number {\n    this.updateScrubSpeedPercentage();\n\n    const seekBarWidth = seekBarWrapper.getBoundingClientRect().width;\n    const increment = seekBarWidth * this.scrubSpeedPercentage;\n\n    return direction === Direction.RIGHT ? increment : -increment;\n  }\n\n  private resetCursorPosition(): void {\n    this.cursorPosition.x = 0;\n    this.cursorPosition.y = 0;\n  }\n\n  private updateCursorPosition(direction: Direction, seekBarWrapper: HTMLElement): void {\n    this.cursorPosition.x += this.getIncrement(direction, seekBarWrapper);\n  }\n\n  private initializeCursorPosition(seekBarWrapper: HTMLElement): void {\n    const playbackPositionMarker = getPlaybackPositionMarker(seekBarWrapper);\n    const rect = getBoundingRectFromElement(playbackPositionMarker);\n\n\n    const startX = rect.x + (rect.width / 2);\n    const startY = rect.y;\n\n    this.cursorPosition.x = startX;\n    this.cursorPosition.y = startY;\n  }\n\n  private initializeOrUpdateCursorPosition(seekBarWrapper: HTMLElement, direction: Direction): void {\n    if (this.isScrubbing) {\n      this.updateCursorPosition(direction, seekBarWrapper);\n    } else {\n      this.initializeCursorPosition(seekBarWrapper);\n    }\n\n    this.isScrubbing = true;\n  }\n\n  private getCursorPositionMouseEventInit(): MouseEventInit {\n    return {\n      clientX: this.cursorPosition.x,\n      clientY: this.cursorPosition.y,\n    };\n  }\n\n  private dispatchMouseMoveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mousemove', this.getCursorPositionMouseEventInit()));\n  }\n\n  private readonly onNavigation = (direction: Direction, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    if (direction === Direction.UP || direction === Direction.DOWN) {\n      this.stopSeeking(getSeekBar(target));\n\n      return;\n    }\n\n    this.initializeOrUpdateCursorPosition(target, direction);\n    this.dispatchMouseMoveEvent(getSeekBar(target));\n\n    preventDefault();\n  };\n\n  private dispatchMouseClickEvent(seekBar: Element): void {\n    const mouseDownHandler = () => {\n      const mouseEventInit = this.getCursorPositionMouseEventInit();\n\n      document.dispatchEvent(new MouseEvent('mouseup', mouseEventInit));\n      this.eventSubscriber.off(seekBar, 'mousedown', mouseDownHandler);\n      this.stopSeeking(seekBar);\n    };\n\n    this.eventSubscriber.on(seekBar, 'mousedown', mouseDownHandler);\n    seekBar.dispatchEvent(new MouseEvent('mousedown'));\n  }\n\n  private stopSeeking(seekBar: Element): void {\n    this.resetCursorPosition();\n    this.isScrubbing = false;\n    this.dispatchMouseLeaveEvent(seekBar);\n  }\n\n  private dispatchMouseLeaveEvent(seekBar: Element): void {\n    seekBar.dispatchEvent(new MouseEvent('mouseleave'));\n  }\n\n  private readonly onAction = (action: Action, target: HTMLElement, preventDefault: () => void): void => {\n    if (!isSeekBarWrapper(target)) {\n      return;\n    }\n\n    const seekBar = getSeekBar(target);\n\n    if (action === Action.SELECT && this.isScrubbing) {\n      this.dispatchMouseClickEvent(seekBar);\n      preventDefault();\n    } else if (action === Action.BACK) {\n      this.stopSeeking(seekBar);\n      preventDefault();\n    }\n  };\n\n  /**\n   * Releases the SeekBraHandler, making sure all event subscribers are removed.\n   */\n  public release(): void {\n    this.eventSubscriber.release();\n    this.rootNavigationGroup.onAction = undefined;\n    this.rootNavigationGroup.onNavigation = undefined;\n  }\n}\n\nfunction isSeekBarWrapper(element: HTMLElement): boolean {\n  return Array.from(element.classList).findIndex(className => /-ui-seekbar$/.test(className)) > -1;\n}\n\nfunction getSeekBar(seekBarWrapper: HTMLElement): Element {\n  return seekBarWrapper.children.item(0);\n}\n\nfunction getPlaybackPositionMarker(seekBarWrapper: HTMLElement): HTMLElement {\n  return seekBarWrapper.querySelector('[class*=\"seekbar-playbackposition-marker\"]');\n}\n","import { NavigationGroup } from './navigationgroup';\nimport { RootNavigationGroup } from './rootnavigationgroup';\nimport { NodeEventSubscriber } from './nodeeventsubscriber';\nimport { SeekBarHandler } from './seekbarhandler';\nimport { getKeyMapForPlatform } from './keymap';\nimport { Action, Direction, KeyMap } from './types';\nimport { isAction, isDirection } from './typeguards';\n\n/**\n * SpatialNavigation keeps track of all navigation groups, and updates the active navigation group when visibility\n * changes on group container.\n *\n * It listens to key events, and triggers either handleNavigation or handleAction on the active group.\n * SeekBarHandler will get instantiated with root navigation group and disposed on release of the spatial navigation.\n */\nexport class SpatialNavigation {\n  private unsubscribeVisibilityChangesFns: (() => void)[];\n  private readonly navigationGroups: NavigationGroup[] = [];\n  private readonly activeNavigationGroups: NavigationGroup[];\n  private readonly eventSubscriber: NodeEventSubscriber;\n  private readonly seekBarHandler: SeekBarHandler;\n  private readonly keyMap: KeyMap;\n\n  constructor(rootNavigationGroup: RootNavigationGroup, ...navigationGroups: NavigationGroup[]) {\n    this.seekBarHandler = new SeekBarHandler(rootNavigationGroup);\n\n    this.activeNavigationGroups = [];\n    this.unsubscribeVisibilityChangesFns = [];\n    this.eventSubscriber = new NodeEventSubscriber();\n    this.navigationGroups = [rootNavigationGroup, ...navigationGroups];\n    this.keyMap = getKeyMapForPlatform();\n\n    this.subscribeToNavigationGroupVisibilityChanges();\n    this.attachKeyEventHandler();\n    this.enableDefaultNavigationGroup();\n  }\n\n  private attachKeyEventHandler(): void {\n    this.eventSubscriber.on(document, 'keydown', this.handleKeyEvent, true);\n  }\n\n  private onShow = (group: NavigationGroup): void => {\n    this.activeNavigationGroups.push(group);\n    this.updateEnabledNavigationGroup();\n  };\n\n  private onHide = (group: NavigationGroup): void => {\n    const groupIndex = this.activeNavigationGroups.findIndex(other => other === group);\n\n    if (groupIndex > -1) {\n      group.disable();\n      this.activeNavigationGroups.splice(groupIndex, 1);\n      this.updateEnabledNavigationGroup();\n    }\n  };\n\n  /**\n   * Subscribes to onHide and onShow on all navigation groups containers as Spatial navigation tracks active navigation\n   * group based on their container visibility.\n   */\n  private subscribeToNavigationGroupVisibilityChanges(): void {\n    this.navigationGroups.forEach(group => {\n      const onShowHandler = () => this.onShow(group);\n      const onHideHandler = () => this.onHide(group);\n\n      group.container.onShow.subscribe(onShowHandler);\n      group.container.onHide.subscribe(onHideHandler);\n\n      this.unsubscribeVisibilityChangesFns.push(\n        () => group.container.onShow.unsubscribe(onShowHandler),\n        () => group.container.onHide.unsubscribe(onHideHandler),\n      );\n    });\n  }\n\n  private unsubscribeFromNavigationGroupVisibilityChanges(): void {\n    this.unsubscribeVisibilityChangesFns.forEach(unsub => unsub());\n    this.unsubscribeVisibilityChangesFns = [];\n  }\n\n  /**\n   * It will enable group of which container is currently shown\n   * If there are no groups with containers that are currently visible, it will enable root navigation group\n   */\n  private enableDefaultNavigationGroup(): void {\n    const isShown = (group: NavigationGroup) => group.container.isShown();\n    const groupToEnable = this.navigationGroups.find(isShown) ?? this.navigationGroups[0];\n\n    if (groupToEnable) {\n      this.activeNavigationGroups.push(groupToEnable);\n      this.updateEnabledNavigationGroup();\n    }\n  }\n\n  /**\n   * Disables navigation groups that are no longer active and calls enable on last pushed navigation group\n   */\n  private updateEnabledNavigationGroup(): void {\n    this.activeNavigationGroups.forEach((group, idx) => {\n      if (idx < this.activeNavigationGroups.length - 1) {\n        group.disable();\n      } else {\n        group.enable();\n      }\n    });\n  }\n\n  /**\n   * Returns currently active navigation group\n   */\n  public getActiveNavigationGroup(): NavigationGroup | undefined {\n    return this.activeNavigationGroups[this.activeNavigationGroups.length - 1];\n  }\n\n  /**\n   * Checks if keyboard event keycode is tracked either as Direction or Action and calls appropriate handler on active\n   * navigation group\n   *\n   * @param e {KeyboardEvent}\n   */\n  private handleKeyEvent = (e: KeyboardEvent): void => {\n    const event: Direction | Action | undefined = this.keyMap[getKeyCode(e)];\n\n    const active = this.getActiveNavigationGroup();\n    if (!active || !active.container || active.container.isHidden() || active.container.isDisabled()) {\n      return;\n    }\n\n    if (isDirection(event)) {\n      active.handleNavigation(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    if (isAction(event)) {\n      active.handleAction(event);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Dispose of SpatialNavigation\n   *\n   * Remove all event handlers, release seekbar handler and release all navigation groups.\n   */\n  public release(): void {\n    this.unsubscribeFromNavigationGroupVisibilityChanges();\n    this.eventSubscriber.release();\n    this.navigationGroups.forEach(group => group.release());\n    this.seekBarHandler.release();\n  }\n}\n\nfunction getKeyCode(event: KeyboardEvent): number {\n  return event.keyCode;\n}\n","import { Component } from '../components/component';\nimport { SettingsPanel } from '../components/settingspanel';\nimport { Container } from '../components/container';\nimport { ListBox } from '../components/listbox';\nimport { Action, Direction } from './types';\n\nexport function isSettingsPanel(component: Component<unknown>): component is SettingsPanel {\n  return component instanceof SettingsPanel;\n}\n\nexport function isComponent(obj: unknown): obj is Component<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Component;\n}\n\nexport function isContainer(obj: unknown): obj is Container<unknown> {\n  return obj !== null && obj !== undefined && obj instanceof Container;\n}\n\nexport function isListBox(obj: unknown): obj is ListBox {\n  return obj instanceof ListBox;\n}\n\nexport function isDirection(direction: unknown): direction is Direction {\n  return typeof direction === 'string' && Object.values<string>(Direction).includes(direction);\n}\n\nexport function isAction(action: unknown): action is Action {\n  return typeof action === 'string' && Object.values<string>(Action).includes(action);\n}\n","export type Callback<T> = (data: T, target: HTMLElement, preventDefault: () => void) => void;\nexport type NavigationCallback = Callback<Direction>;\nexport type ActionCallback = Callback<Action>;\nexport type KeyMap = {\n  [keyCode: number]: Action | Direction;\n};\n\nexport enum Direction {\n  UP = 'up',\n  DOWN = 'down',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport enum Action {\n  SELECT = 'select',\n  BACK = 'back',\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { PlayerAPI } from 'bitmovin-player';\n\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { AudioTrackListBox } from './components/audiotracklistbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { CloseButton } from './components/closebutton';\nimport { Container } from './components/container';\nimport { ControlBar } from './components/controlbar';\nimport { CustomPlaybackButtons } from './components/customplaybackbuttons';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { Label } from './components/label';\nimport {\n  MetadataLabel,\n  MetadataLabelContent,\n} from './components/metadatalabel';\nimport {\n  PictureInPictureToggleButton,\n} from './components/pictureinpicturetogglebutton';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport {\n  PlaybackTimeLabel,\n  PlaybackTimeLabelMode,\n} from './components/playbacktimelabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport {\n  SettingsPanelPageOpenButton,\n} from './components/settingspanelpageopenbutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { Spacer } from './components/spacer';\nimport { SubtitleListBox } from './components/subtitlelistbox';\nimport { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport {\n  SubtitleSettingsLabel,\n} from './components/subtitlesettings/subtitlesettingslabel';\nimport {\n  SubtitleSettingsPanelPage,\n} from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { TitleBar } from './components/titlebar';\nimport { UIContainer } from './components/uicontainer';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { VolumeSlider } from './components/volumeslider';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { Watermark } from './components/watermark';\nimport { i18n } from './localization/i18n';\nimport { PlayerUtils } from './playerutils';\nimport {\n  ListNavigationGroup,\n  ListOrientation,\n} from './spatialnavigation/ListNavigationGroup';\nimport { RootNavigationGroup } from './spatialnavigation/rootnavigationgroup';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\nimport { UIConfig } from './uiconfig';\nimport {\n  UIConditionContext,\n  UIManager,\n} from './uimanager';\n\nexport namespace UIFactory {\n  export function buildDefaultUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return UIFactory.buildModernSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultCastReceiverUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function buildDefaultTvUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return UIFactory.buildModernTvUI(player, config);\n  }\n\n  export function modernUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"settings.video.quality\"),\n          new VideoQualitySelectBox()\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"speed\"),\n          new PlaybackSpeedSelectBox()\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"settings.audio.track\"),\n          new AudioTrackSelectBox()\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"settings.audio.quality\"),\n          new AudioQualitySelectBox()\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer(\"settings.subtitles\"),\n      text: i18n.getLocalizer(\"open\"),\n    });\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer(\"settings.subtitles\"),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: \"menubar\",\n        }\n      )\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    let controlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: [\"text-right\"],\n            }),\n          ],\n          cssClasses: [\"controlbar-top\"],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: [\"controlbar-bottom\"],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({\n              text: i18n.getLocalizer(\"ads.remainingTime\"),\n            }),\n            new AdSkipButton(),\n          ],\n          cssClass: \"ui-ads-status\",\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: [\"controlbar-bottom\"],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: [\"ui-skin-ads\"],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"settings.video.quality\"),\n          new VideoQualitySelectBox()\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"speed\"),\n          new PlaybackSpeedSelectBox()\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"settings.audio.track\"),\n          new AudioTrackSelectBox()\n        ),\n        new SettingsPanelItem(\n          i18n.getLocalizer(\"settings.audio.quality\"),\n          new AudioQualitySelectBox()\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n      cssClasses: [\"ui-settings-panel-small-screen\"],\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer(\"settings.subtitles\"),\n      text: i18n.getLocalizer(\"open\"),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer(\"settings.subtitles\"),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: \"menubar\",\n        }\n      )\n    );\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(\n      new CloseButton({ target: settingsPanel })\n    );\n\n    let playbackControls = new ControlBar({\n      components: [new CustomPlaybackButtons()],\n      cssClasses: [\"controlbar-playback-controls\"],\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: [\"text-right\"],\n            }),\n          ],\n          cssClasses: [\"controlbar-top\"],\n        }),\n      ],\n      cssClasses: [\"controlbar-playback-seekbar\"],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        // new PlaybackToggleOverlay(),\n        // new CustomPlaybackControlOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        playbackControls,\n        new TitleBar({\n          components: [\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new VolumeToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: [\"ui-titlebar-small-screen\"],\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: [\"ui-skin-smallscreen\"],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: \"label-metadata-title\" }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: \"Ad: {remainingTime} secs\" }),\n            new AdSkipButton(),\n          ],\n          cssClass: \"ui-ads-status\",\n        }),\n      ],\n      cssClasses: [\"ui-skin-ads\", \"ui-skin-smallscreen\"],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n              hideInLivePlayback: true,\n            }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: [\"text-right\"],\n            }),\n          ],\n          cssClasses: [\"controlbar-top\"],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: [\"ui-skin-cast-receiver\"],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return (\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth &&\n              context.isAd &&\n              context.adRequiresUi\n            );\n          },\n        },\n        {\n          ui: modernAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI(),\n          condition: (context: UIConditionContext) => {\n            return (\n              !context.isAd &&\n              !context.adRequiresUi &&\n              context.isMobile &&\n              context.documentWidth < smallScreenSwitchWidth\n            );\n          },\n        },\n        {\n          ui: modernUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi;\n          },\n        },\n      ],\n      config\n    );\n  }\n\n  export function buildModernSmallScreenUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ui: modernSmallScreenAdsUI(),\n          condition: (context: UIConditionContext) => {\n            return context.isAd && context.adRequiresUi;\n          },\n        },\n        {\n          ui: modernSmallScreenUI(),\n          condition: (context: UIConditionContext) => {\n            return !context.isAd && !context.adRequiresUi;\n          },\n        },\n      ],\n      config\n    );\n  }\n\n  export function buildModernCastReceiverUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n\n  export function buildModernTvUI(\n    player: PlayerAPI,\n    config: UIConfig = {}\n  ): UIManager {\n    return new UIManager(\n      player,\n      [\n        {\n          ...modernTvUI(),\n        },\n      ],\n      config\n    );\n  }\n\n  export function modernTvUI() {\n    const subtitleListBox = new SubtitleListBox();\n    const subtitleListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, subtitleListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const audioTrackListBox = new AudioTrackListBox();\n    const audioTrackListPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [new SettingsPanelItem(null, audioTrackListBox)],\n        }),\n      ],\n      hidden: true,\n    });\n\n    const seekBar = new SeekBar({ label: new SeekBarLabel() });\n    const playbackToggleOverlay = new PlaybackToggleOverlay();\n    const subtitleToggleButton = new SettingsToggleButton({\n      settingsPanel: subtitleListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: \"ui-subtitlesettingstogglebutton\",\n      text: i18n.getLocalizer(\"settings.subtitles\"),\n    });\n    const audioToggleButton = new SettingsToggleButton({\n      settingsPanel: audioTrackListPanel,\n      autoHideWhenNoActiveSettings: true,\n      cssClass: \"ui-audiotracksettingstogglebutton\",\n      ariaLabel: i18n.getLocalizer(\"settings.audio.track\"),\n      text: i18n.getLocalizer(\"settings.audio.track\"),\n    });\n    const uiContainer = new UIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        playbackToggleOverlay,\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.CurrentTime,\n                  hideInLivePlayback: true,\n                }),\n                seekBar,\n                new PlaybackTimeLabel({\n                  timeLabelMode: PlaybackTimeLabelMode.RemainingTime,\n                  cssClasses: [\"text-right\"],\n                }),\n              ],\n              cssClasses: [\"controlbar-top\"],\n            }),\n          ],\n        }),\n        new TitleBar({\n          components: [\n            new Container({\n              components: [\n                new MetadataLabel({ content: MetadataLabelContent.Title }),\n                subtitleToggleButton,\n                audioToggleButton,\n              ],\n              cssClasses: [\"ui-titlebar-top\"],\n            }),\n            new Container({\n              components: [\n                new MetadataLabel({\n                  content: MetadataLabelContent.Description,\n                }),\n                subtitleListPanel,\n                audioTrackListPanel,\n              ],\n              cssClasses: [\"ui-titlebar-bottom\"],\n            }),\n          ],\n        }),\n        new RecommendationOverlay(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: [\"ui-skin-tv\"],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n\n    const spatialNavigation = new SpatialNavigation(\n      new RootNavigationGroup(\n        uiContainer,\n        playbackToggleOverlay,\n        seekBar,\n        audioToggleButton,\n        subtitleToggleButton\n      ),\n      new ListNavigationGroup(\n        ListOrientation.Vertical,\n        subtitleListPanel,\n        subtitleListBox\n      ),\n      new ListNavigationGroup(\n        ListOrientation.Vertical,\n        audioTrackListPanel,\n        audioTrackListBox\n      )\n    );\n\n    return {\n      ui: uiContainer,\n      spatialNavigation: spatialNavigation,\n    };\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\nimport { SpatialNavigation } from './spatialnavigation/spatialnavigation';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n  spatialNavigation?: SpatialNavigation;\n}\n\nexport interface ActiveUiChangedArgs extends NoArgs {\n  /**\n   * The previously active {@link UIInstanceManager} prior to the {@link UIManager} switching to a different UI variant.\n   */\n  previousUi: UIInstanceManager;\n  /**\n   * The currently active {@link UIInstanceManager}.\n   */\n  currentUi: UIInstanceManager;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n    onActiveUiChanged: new EventDispatcher<UIManager, ActiveUiChangedArgs>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    }\n    else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(\n        player,\n        uiVariant.ui,\n        this.config,\n        uiVariant.spatialNavigation,\n      ));\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (uiVariantsWithoutCondition.length > 0\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant({\n        isAd: isAd,\n        adRequiresUi: adRequiresUi,\n      }, (context) => {\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n        // themselves for the current ad.\n        if (context.isAd) {\n          /* Relay the ON_AD_STARTED event to the ads UI\n           *\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n           * Since this can break functionality of components that rely on this event, we relay the event to the\n           * ads UI components with the following call.\n           */\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n        }\n      });\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const previousUi = this.currentUi;\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    // Determine if the UI variant is changing\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (nextUi === this.currentUi) {\n      return;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Hide the currently active UI variant\n    if (this.currentUi) {\n      this.currentUi.getUI().hide();\n    }\n\n    // Assign the new UI variant as current UI\n    this.currentUi = nextUi;\n\n    // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n    // to an instance, we're done here.\n    if (this.currentUi == null) {\n      return;\n    }\n    // Add the UI to the DOM (and configure it) the first time it is selected\n    if (!this.currentUi.isConfigured()) {\n      this.addUi(this.currentUi);\n      // ensure that the internal state is ready for the upcoming show call\n      if (!this.currentUi.getUI().isHidden()) {\n        this.currentUi.getUI().hide();\n      }\n    }\n    if (onShow) {\n      onShow();\n    }\n    this.currentUi.getUI().show();\n    this.events.onActiveUiChanged.dispatch(this, { previousUi, currentUi: nextUi });\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      const matchesCondition = uiVariant.condition == null || uiVariant.condition(switchingContext) === true;\n      if (nextUiVariant == null && matchesCondition) {\n        nextUiVariant = uiVariant;\n      } else {\n        // hide all UIs besides the one which should be active\n        uiVariant.ui.hide();\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n\n    const uiContainer = ui.getUI();\n    if (uiContainer.hasDomElement()) {\n      uiContainer.getDomElement().remove();\n    }\n\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Fires after the UIManager has switched to a different UI variant.\n   * @returns {EventDispatcher<UIManager, ActiveUiChangedArgs>}\n   */\n  get onActiveUiChanged(): EventDispatcher<UIManager, ActiveUiChangedArgs> {\n    return this.events.onActiveUiChanged;\n  }\n\n  /**\n   * The current active {@link UIInstanceManager}.\n   */\n  get activeUi(): UIInstanceManager {\n    return this.currentUi;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n  protected spatialNavigation?: SpatialNavigation;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig, spatialNavigation?: SpatialNavigation) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n    this.spatialNavigation = spatialNavigation;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.spatialNavigation?.release();\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.storeVolume();\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\n\n// Default relative line height\nconst lineHeightPercent = 5;\nlet lineCount: number = 1;\n\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nenum VttVerticalWriting {\n  GrowingRight = 'lr',\n  GrowingLeft = 'rl',\n}\n\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Bottom, Direction.Top],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (\n  cueContainerDom: DOM,\n  { lineAlign }: VTTProperties,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (lineAlign) {\n    case 'center':\n      setCssForCenterLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n      break;\n    case 'end':\n      setCssForEndLineAlign(\n        cueContainerDom, direction, relativeCueBoxPosition);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  const overlayReferenceEdge = DirectionPair.get(direction);\n  if (vtt.line === 'auto' && vtt.vertical) {\n    cueContainerDom.css(overlayReferenceEdge, '0');\n    return;\n  }\n  if (vtt.line === 'auto' && !vtt.vertical) {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  if (vtt.lineAlign !== 'end')\n    cueContainerDom.css(\n      overlayReferenceEdge, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirectionAndCueBoxPositioning = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  switch (vtt.vertical) {\n  case '':\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingRight:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\n    break;\n  case VttVerticalWriting.GrowingLeft:\n    setCueBoxPositionForVerticalWriting(\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\n    break;\n  }\n};\n\nconst setCueBoxPositionForVerticalWriting = (\n  cueContainerDom: DOM,\n  direction: VerticalWritingDirection,\n  vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n    const writingMode = direction === Direction.Right ?\n      'vertical-lr' : 'vertical-rl';\n\n    cueContainerDom.css('writing-mode', writingMode);\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nconst countLines = (innerHtml: string) =>\n  innerHtml.split('<br />').length;\n\nconst setCssForCenterLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  relativeCueBoxPosition: number) => {\n  switch (direction) {\n    case Direction.Bottom:\n      cueContainerDom.css('transform', 'translateY(-50%)');\n      break;\n    case Direction.Left:\n      cueContainerDom.css('transform', 'translateX(50%)');\n      break;\n    case Direction.Right:\n      cueContainerDom.css('transform', 'translateX(-50%)');\n      break;\n  }\n};\n\nconst setCssForEndLineAlign = (\n  cueContainerDom: DOM,\n  direction: Direction,\n  offset: number) => {\n      const opositeToOverlayReferenceEdge = direction;\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n\n    lineCount = countLines(cueContainer.getText());\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}